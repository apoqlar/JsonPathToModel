name: Build and publish to nuget package - JsonPathToModel

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      Version: ${{ steps.gitversion.outputs.SemVer }}
      CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Ensure GitVersion.yml exists (Mainline mode so +semver works every time)
      - name: Ensure GitVersion config
        run: |
          cat > GitVersion.yml <<'EOF'
          mode: Mainline
          commit-message-incrementing: Enabled
          branches:
            main:
              regex: main
              increment: Patch
          EOF

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: 5.x

      - name: Determine Version
        uses: gittools/actions/gitversion/execute@v0.9.7
        id: gitversion

      - name: Display GitVersion outputs
        run: |
          echo "Version: ${{ steps.gitversion.outputs.SemVer }}"
          echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}"

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 8.0.x

      - name: Build
        run: dotnet build JsonPathToModel/JsonPathToModel.csproj -p:Version='${{ steps.gitversion.outputs.SemVer }}' --configuration Release

      - name: Pack NuGet package
        run: dotnet pack JsonPathToModel/JsonPathToModel.csproj -p:Version='${{ steps.gitversion.outputs.SemVer }}' -c Release

      - name: Upload NuGet package to GitHub
        uses: actions/upload-artifact@v4.4.3
        with:
          name: nugetPackage
          path: JsonPathToModel/bin/Release/
 
  release:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Download nuget package artifact
        uses: actions/download-artifact@v4.1.8
        with:
          name: nugetPackage

      - name: List what was downloaded
        run: ls -al

      - name: Prep packages
        run: dotnet nuget add source --username jenkins-vsi-health --password ${{ secrets.NUGET_PACKAGE_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/apoqlar/index.json"

      - name: Push package to GitHub packages
        run: dotnet nuget push ./*.nupkg --api-key ${{ secrets.NUGET_PACKAGE_TOKEN }} --source "github"

      - name: Create Release
        if: needs.build.outputs.CommitsSinceVersionSource > 0
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.build.outputs.Version }}
          name: Release ${{ needs.build.outputs.Version }}
          artifacts: "nugetPackage/*"
          token: ${{ secrets.NUGET_PACKAGE_TOKEN }}
